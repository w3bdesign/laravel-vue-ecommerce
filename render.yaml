# render.yaml
# Defines the infrastructure for deploying the Laravel application on Render
# based on the provided schema.json.
# Assumes CircleCI builds the Docker image, pushes it to a registry,
# and then triggers a deploy on Render using a deploy hook.

databases:
  - name: ecommerce-db # Name for your managed MySQL database
    plan: free # Example: "free", "starter", etc.
    # databaseName: laravel_ecommerce_db # Optional: specify the actual database name
    # user: db_user # Optional: specify the username
    # The schema provided lists postgresMajorVersion, not mysqlMajorVersion.
    # For MySQL, version is typically tied to the plan or a default.

services:
  # PHP-FPM Service (Private Service)
  - type: pserv
    name: php-fpm # Internal service name
    runtime: docker # Added runtime
    dockerContext: . # Build from project root
    dockerfilePath: ./php-fpm.render.dockerfile # Using the Dockerfile we created
    envVars:
      - key: APP_NAME
        value: "Laravel Vue Ecommerce"
      - key: APP_ENV
        value: "production"
      - key: APP_DEBUG
        value: "false"
      - key: APP_URL
        value: "${RENDER_EXTERNAL_URL}" # Will be taken from the web service
      - key: ASSET_URL
        value: "${RENDER_EXTERNAL_URL}" # Will be taken from the web service
      - key: APP_KEY
        fromService:
          type: web
          name: laravel-vue-ecommerce # Name of the Nginx web service
          envVarKey: APP_KEY_GENERATED # Use a different key to avoid circular dependency if APP_KEY is also on web
      - key: LOG_CHANNEL
        value: "stderr"
      - key: DB_CONNECTION
        value: "mysql"
      - key: DATABASE_URL
        fromDatabase:
          name: ecommerce-db
          property: connectionString
      - key: CACHE_DRIVER
        value: "file" # Consider 'redis' if you add a Redis service
      - key: SESSION_DRIVER
        value: "file" # Consider 'redis'
      - key: STRIPE_KEY
        sync: false
      - key: STRIPE_SECRET
        sync: false
      - key: STRIPE_WEBHOOK_SECRET
        sync: false
      - key: CASHIER_CURRENCY
        value: "NOK"
      - key: CASHIER_CURRENCY_LOCALE
        value: "nb-NO"
      - key: MAIL_MAILER
        value: "smtp"
      - key: MAIL_HOST
        value: "your_mail_host"
      - key: MAIL_PORT
        value: "587"
      - key: MAIL_USERNAME
        sync: false
      - key: MAIL_PASSWORD
        sync: false
      - key: MAIL_ENCRYPTION
        value: "tls"
      - key: MAIL_FROM_ADDRESS
        value: "hello@example.com"
      - key: MAIL_FROM_NAME
        value: "${APP_NAME}"
      # For Laradock PHP_VERSION in php-fpm.render.dockerfile build arg
      - key: PHP_VERSION 
        value: "8.2" # Or from laradock/.env if possible, but direct is safer for Render
    disk:
      name: laravel-storage 
      mountPath: /var/www/html/storage # Mount point for Laravel's storage
      sizeGB: 1 # sizeGB defined directly here

  # Nginx Service (Web Service)
  - type: web
    name: laravel-vue-ecommerce # Public-facing service name
    runtime: docker # Added runtime
    dockerContext: ./laradock/nginx # Build using Laradock's Nginx Dockerfile
    # dockerfilePath is implicitly Dockerfile within the context
    autoDeploy: false
    healthCheckPath: / # Or a static file like /favicon.ico, or /api/health if Nginx proxies it
    envVars:
      - key: APP_NAME # For consistency, though Nginx might not use it directly
        value: "Laravel Vue Ecommerce"
      - key: APP_ENV
        value: "production"
      - key: APP_URL
        value: "${RENDER_EXTERNAL_URL}"
      - key: ASSET_URL
        value: "${RENDER_EXTERNAL_URL}"
      - key: APP_KEY_GENERATED # Nginx service generates the APP_KEY
        generateValue: true
      # Environment variables for Laradock's Nginx entrypoint/configuration
      - key: NGINX_PHP_UPSTREAM_CONTAINER
        value: "php-fpm" # Must match the name of the php-fpm service above
      - key: NGINX_PHP_UPSTREAM_PORT
        value: "9000"
      - key: NGINX_APP_CODE_PATH_CONTAINER
        value: "/var/www/html" # Used by laradock/nginx/sites/default.conf
      # For Laradock PHP_VERSION in its Nginx Dockerfile build args (if it uses it)
      - key: PHP_VERSION 
        value: "8.2" 
    # Nginx service does not directly write to Laravel's storage,
    # but it needs the application code (public assets) which is built into its image.

# Top-level disks: block removed as it's not allowed by schema; disk defined in php-fpm service.
